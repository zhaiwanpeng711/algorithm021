## 本周作业

### 简单：

- [柠檬水找零](https://leetcode-cn.com/problems/lemonade-change/description/)（亚马逊在半年内面试中考过）

  ```java
  //贪心算法
  class Solution {
        public boolean lemonadeChange(int[] bills) {
          int five = 0, ten = 0;
          for (int bill : bills) {
              if (bill == 5) {
                  five++;
              } else if (bill == 10) {
                  if (five == 0) {
                      return false;
                  }
                  five--;
                  ten++;
              } else {
                  if (five > 0 && ten > 0) {
                      five--;
                      ten--;
                  } else if (five >= 3) {
                      five -= 3;
                  } else {
                      return false;
                  }
              }
          }
          return true;
      }
  }
  ```

  

- [买卖股票的最佳时机 II ](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/description/)（亚马逊、字节跳动、微软在半年内面试中考过）

  ```java
  class Solution {
      //1.贪心算法-只要后一天比前一天的大就可以完成一次交易
     public int maxProfit(int[] prices) {
          int profit = 0;
          for (int i = 1; i < prices.length; i++) {
              int tmp = prices[i] - prices[i - 1];
              if (tmp > 0) profit += tmp;
          }
          return profit;
      }
  }
  ```

  

- [分发饼干](https://leetcode-cn.com/problems/assign-cookies/description/)（亚马逊在半年内面试中考过）

  ```java
  //胃口大的吃大块，胃口小的吃小的
  class Solution {
      public int findContentChildren(int[] g, int[] s) {
          //先对胃口值和饼干尺寸进行排序
          Arrays.sort(g);
          Arrays.sort(s);
          int count = 0;
          int i = s.length - 1;
          for (int j = g.length - 1; i >= 0 && j >= 0; j--) {
              //如果当前饼干能满足当前孩子的胃口值，count就加1，否则就继续查找胃口更小的孩子
              if (g[j] <= s[i]) {
                  count++;
                  i--;
              }
          }
          return count;
      }
  }
  ```

  

- [模拟行走机器人](https://leetcode-cn.com/problems/walking-robot-simulation/description/)

  ```
  
  ```

  

- 使用二分查找，寻找一个半有序数组 [4, 5, 6, 7, 0, 1, 2] 中间无序的地方

  ```
  
  ```

### 中等：

- [单词接龙](https://leetcode-cn.com/problems/word-ladder/description/)（亚马逊在半年内面试常考）

  ```
  
  ```

  

- [岛屿数量](https://leetcode-cn.com/problems/number-of-islands/)（近半年内，亚马逊在面试中考查此题达到 350 次）

  ```java
  class Solution {
   public int numIslands(char[][] grid) {
          int count = 0;
          for(int i = 0; i < grid.length; i++) {
              for(int j = 0; j < grid[0].length; j++) {
                  if(grid[i][j] == '1'){
                      dfs(grid, i, j);
                      count++;
                  }
              }
          }
          return count;
      }
      private void dfs(char[][] grid, int i, int j){
          if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == '0') return;
          grid[i][j] = '0';
          dfs(grid, i + 1, j);
          dfs(grid, i, j + 1);
          dfs(grid, i - 1, j);
          dfs(grid, i, j - 1);
      }
  
  }
  ```

  

- [扫雷游戏](https://leetcode-cn.com/problems/minesweeper/description/)（亚马逊、Facebook 在半年内面试中考过）

  ```
  
  ```

  

- [跳跃游戏](https://leetcode-cn.com/problems/jump-game/) （亚马逊、华为、Facebook 在半年内面试中考过）

  ```
  
  ```

  

- [搜索旋转排序数组](https://leetcode-cn.com/problems/search-in-rotated-sorted-array/)（Facebook、字节跳动、亚马逊在半年内面试常考）

  ```java
  class Solution {
      public int search(int[] nums, int target) {
      int lo = 0, hi = nums.length - 1, mid = 0;
      while (lo <= hi) {
          mid = lo + (hi - lo) / 2;
          if (nums[mid] == target) {
              return mid;
          }
          // 先根据 nums[mid] 与 nums[lo] 的关系判断 mid 是在左段还是右段 
          if (nums[mid] >= nums[lo]) {
              // 再判断 target 是在 mid 的左边还是右边，从而调整左右边界 lo 和 hi
              if (target >= nums[lo] && target < nums[mid]) {
                  hi = mid - 1;
              } else {
                  lo = mid + 1;
              }
          } else {
              if (target > nums[mid] && target <= nums[hi]) {
                  lo = mid + 1;
              } else {
                  hi = mid - 1;
              }
          }
      }
      return -1;
    }
  
  }
  ```

  

- [搜索二维矩阵](https://leetcode-cn.com/problems/search-a-2d-matrix/)（亚马逊、微软、Facebook 在半年内面试中考过）

  ```java
  class Solution {
     public boolean searchMatrix(int[][] matrix, int target) {
      int m = matrix.length;
      if (m == 0) return false;
      int n = matrix[0].length;
  
      // 二分查找
      int left = 0, right = m * n - 1;
      int pivotIdx, pivotElement;
      while (left <= right) {
        pivotIdx = (left + right) / 2;
        pivotElement = matrix[pivotIdx / n][pivotIdx % n];
        if (target == pivotElement) return true;
        else {
          if (target < pivotElement) right = pivotIdx - 1;
          else left = pivotIdx + 1;
        }
      }
      return false;
    }
  }
  ```

  

- [寻找旋转排序数组中的最小值](https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/)（亚马逊、微软、字节跳动在半年内面试中考过）

  ```java
  class Solution {
      public int findMin(int[] nums) {
          int min = Integer.MAX_VALUE;
          int left = 0, right = nums.length - 1;
          while(left <= right){
              int mid = left + (right - left) / 2;
              if(nums[left] <= nums[mid]){ //左边有序
                  min = Math.min(min,nums[left]);
                  left = mid + 1; //看右边
              }else{ //右边有序
                  min = Math.min(min,nums[mid]);
                  right = mid - 1; //看左边
              }
          }
          return min;
    }
  ```

  

### 困难

- [单词接龙 II ](https://leetcode-cn.com/problems/word-ladder-ii/description/)（微软、亚马逊、Facebook 在半年内面试中考过）

  ```
  
  ```

  

- [跳跃游戏 II ](https://leetcode-cn.com/problems/jump-game-ii/)（亚马逊、华为、字节跳动在半年内面试中考过）

  ```
  
  ```

  