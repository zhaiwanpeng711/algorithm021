1. 数组

   问题在于增加、删除的时候 O(n)，获取元素非常快O（1）;

   查看ArrayList源码，实现方式从原copy到目标地址 System.arraycopy(data,index,data,index+1,size-index);

2. 链表

   一个 next 指针 单链表  ；头指针 用head 表示，尾指针用tail表示 ，表示双向链表；尾指针指向头指针像贪吃蛇一样为循环链表；java 实现LinkedList 为双向链表；

   问题查询元素，增加和删除为O(1);查询为O(n);

   有序普通的数组可以用二分查找

3. 跳表

   调表要求链表里的元素必须是有序的；

   如何提高链表线性查找的效率->空间换时间，添加到原始链表的多级索引；O(logn) 怎么算的？这个一直理解不了；

   LRU缓存机制，用DoubleList;

   Redis 使用的是SkipList;

4. 栈

   先进后出，添加删除皆为O(1),查询O（n）

5. 队列

   先进先出，添加删除皆为O(1),查询O（n）

   实战用双端队列Deque多，两端均可添加删除元素。

   熟悉Java Stack 和Queue的源码；

6. 优先队列

   插入O(1)，取出O(logn)按照元素的优先级取出；

   底层具体实现的数据结构较为多样的和复杂：heap、bst、treap

7. 双端队列

8. 实战题目解析：

   五毒神掌：读题和思考，5-10分钟没有思路就看题解，找个最好理解的，最优秀的背诵默写，直到熟练；

   1.移动零：  1.loop count zeros   2.开新数组 如果碰到0就往后放 3.直接在数组种进行index操作；

   2.盛水最多的容器： 1.枚举 left bar .right bar  (x-y)*height_diff

   ​                                 2.两重遍历，记录最大的值

   ​                                 3.双指针法，双端夹逼O(n)

   3.爬楼梯：1.可否暴力？ 2.基本情况如何解决？3.找最近重复子问题（先人肉，在找规律）

​       4.三数之和：1.暴力两层循环  2.两重暴力+哈希表法  3. 排序后夹逼法

​       linkedlist题没有复杂的算法，大部分需要多练熟悉怎样操作指针

​       5.环形链表：1.暴力遍历链表 2.快慢指针

​       6.有效的括号：用栈解决，如果一个东西拥有最近相关性（类似于圆葱一样），就用栈来解决；

​       7.最小栈：两个栈 一个是正常的栈 一个是最小值的栈

​                         遇到栈实现队列或者用队列实现栈 都是使用两个栈会队列 ，这是固定套路； 

​        8.柱状图种最大的矩形：1.固定中间的一个棒，找到它的左右边界这种思想要学会；

​                                                2.维护以这个栈，这个栈里的元素从小到大排序，自底向上；每次入栈检查是否大于栈底元素，大于就入栈否则就进行出战操作，计算面积；

​        9.滑动窗口：所有滑动窗口问题都使用双端队列来解决；